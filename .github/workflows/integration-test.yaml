name: E2E Tests

on:
  push:
    branches:
      - main

jobs:
  integration-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Start postgres container
        run: docker-compose up -d postgres

      - name: Wait for postgres to Start
        run: sleep 20s  # Adjust the wait time based on your system's startup time

      - name: Start remaining containers except adaptors
        run: docker-compose up -d manager registry simcomp-ui axis-converter
        
      - name: Wait for Services to Start
        run: sleep 10s  # Adjust the wait time based on your system's startup time

      - name: Start adaptors
        run: docker-compose up -d demo-adaptor webots-adaptor
        
      - name: Wait for adaptors
        run: sleep 20s  # Adjust the wait time based on your system's startup time
          
      - name: Run Integration Tests
        run: |
          # load envs
          set -o allexport
          source .env
          set +o allexport
          # print debug info
          echo "ADAPTOR_MANAGER_PORT: ${ADAPTOR_MANAGER_PORT}"
          docker-compose ps  # Print container information
          netstat -tuln      # Print open ports
          docker-compose logs manager
          docker-compose logs demo-adaptor
          docker-compose logs webots-adaptor
          ###### System tests as curl-statements
          echo "Starting E2E tests"
          echo "Fetching available simulation types"
          # Request to fetch simulation types
          response=$(curl -sX GET http://localhost:${ADAPTOR_MANAGER_PORT}/simulation/type)
          echo "$response"
          # Verify the response contains "availableSimulations" array with specified entries
          echo "$response" | jq '.availableSimulations' | grep -q 'DEMO' || exit 1
          echo "$response" | jq '.availableSimulations' | grep -q 'WEBOTS' || exit 1

          # Request to manager endpoint to add a WEBOTS instance
          echo "Adding simulation instance (webots)"
          curl -sX POST \
            -H "Content-Type: application/json" \
            -d '{"simulationType": "WEBOTS", "instanceId": "MY_PERSONAL_WEBOTS_INSTANCE", "instanceHost": "127.0.0.1", "instancePort": 10010}' \
            http://localhost:${ADAPTOR_MANAGER_PORT}/simulation/instance
          echo "Adding simulation instance (demo)"
          # Request to manager endpoint to add a DEMO instance
          curl -sX POST \
            -H "Content-Type: application/json" \
            -d '{"simulationType": "DEMO", "instanceId": "MY_PERSONAL_DEMO_INSTANCE", "instanceHost": "127.0.0.1", "instancePort": 10011}' \
            http://localhost:${ADAPTOR_MANAGER_PORT}/simulation/instance
          echo "Fetching simulation instances to verify registration of instances"
          # Request to fetch simulation instances
          response=$(curl -sX GET http://localhost:${ADAPTOR_MANAGER_PORT}/simulation/instance)
          echo "$response"
          
          # Verify the response is an array with exactly two entries
          echo "$response" | jq 'length' | grep -q '^2$' || exit 1

      - name: Tear down Docker Compose
        run: docker-compose down
